[alias]
	# My better-git-branch script lists branches with useful information
	# and colors
	bb = !better-git-branch

	# Safer push with force
	pushf = push --force-with-lease --force-if-includes

	# Push with force and without pre-push hooks
	pushff = pushf --no-verify

[core]
	editor = vim
	excludesfile = /home/user/.gitignore

	# Use https://github.com/dandavison/delta as the default pager
	# in diff-so-fancy mode.
	pager = delta --diff-so-fancy

[help]
	# Autocorrect typos in git commands
	autocorrect = immediate

[init]
	# Use the main branch as the default branch
	defaultBranch = main

[pager]
	# Use a pager for the diff command
	diff = true

[interactive]
	# Use delta to color the diff of interactive commands (e.g. `git add -p`)
	diffFilter = delta --color-only

[delta]
	# Support navigating the diff output with n and N
	navigate = true
	# Display tabs with a width of 4
	tabs = 4
	diff-so-fancy = true

[submodule]
	# Enable --recurse-submodules by default
	recurse = true

[branch]
	# Set up branches to be rebased on pull by default
	autosetuprebase = always

	# Sort branches by committer date, newest first
	sort = -committerdate

[diff]
	# Detect renames & copies (defaults to only renames)
	renames = copy

	# Use the histogram algorithm for better diffs
	algorithm = histogram

	# Use indent-based heuristic for better diffs
	indentHeuristic = true

[pull]
	# Use rebase by default
	rebase = true

	# Only allow fast-forward merge when using 'pull'.
	# => Non-ff merge is not attempted automatically and will need to be done manually.
	ff = only

[push]
	# Automatically create the same branch on the remote if it doesn't exist
	autoSetupRemote = true

	# When `--force-with-lease` is used, force an update only if the tip of the remote-tracking ref has been integrated locally.
	# (this is the safest force behavior, let's try!)
	useForceIfIncludes = true

[merge]
	# Use the zdiff3 style for merge conflicts
	conflictStyle = zdiff3

[mergetool]
	# Do not keep '.orig' files around after a merge conflict for that file,
	# (I can always find the original files with git!)
	keepBackup = false

[commit]
	# Always enable `--verbose` on commit/squash/...
	# (shows diff of what is being commited <3)
	verbose = true

[rebase]
	# Automatically create a temporary stash entry before the operation begins, and apply it after the
	# operation ends.
	autostash = true

	# Automatically mark `fixup:` / `amend:` / `squash:` commits as `fixup` so they'll be auto
	# squashed into their respective commit.
	autosquash = true

	# Print a warning when deleting commit lines in interactive rebase.
	# (use an explicit 'drop' action to avoid the warning)
	missingCommitsCheck = "warn"

[rerere]
	# Activate 'reuse recorded resolution' system, tracking before/after conflict resolution when they
	# happen and auto-resolve future similar ones.
	# Can be useful while doing git rebases, to auto-resolve conflicts I already fixed in the past.
	#
	# Ref: https://www.git-scm.com/book/en/v2/Git-Tools-Rerere
	enabled = true

[fetch]
	# Writes the commit graph on fetch, takes a bit more time but significantly improves performance
	# of many Git commands that need to navigate the graph of commits (e.g. `git log --graph`).
	# ref: https://blog.gitbutler.com/git-tips-3-really-large-repositories/#commit-graph
	writeCommitGraph = true

[stash]
	# Show the contents of stash entry by default
	showPatch = true

	# Show the untracked files of a stash entry
	showIncludeUntracked

[blame]
	# Highlight recent changes in the output of `git blame`
	coloring = highlightRecent

[log]
	# Continue listing the history of a file beyond renames
	follow = true

[color "blame"]
	highlightRecent = blue,6 month ago,green,1 month ago,brightGreen

[color "diff"]
	newMoved = cyan
	oldMoved = blue dim

# Use SSH when pushing to GitHub and GitLab
[url "git@github.com:"]
	pushInsteadOf = https://github.com/
[url "git@gitlab.com:"]
	pushInsteadOf = https:/gitlab.com/
